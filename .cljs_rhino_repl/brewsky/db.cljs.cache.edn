{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name brewsky.db, :imports nil, :requires {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :uses nil, :defs {app-db {:name brewsky.db/app-db, :file "/code/src/apps/brewsky/src/brewsky/db.cljs", :line 10, :column 1, :end-line 10, :end-column 12, :meta {:file "/code/src/apps/brewsky/src/brewsky/db.cljs", :line 10, :column 6, :end-line 10, :end-column 12}, :tag cljs.core/IMap}}, :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{:req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys cljs.core/string? :req-specs :brewsky.db/greeting cljs.core/contains? cljs.core/map? % :brewsky.db/app-db cljs.spec.alpha/keys :req :req-keys cljs.core/fn :opt-specs :pred-forms :greeting :opt}, :order [:brewsky.db/greeting cljs.core/string? :brewsky.db/app-db cljs.spec.alpha/keys :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms :opt :greeting cljs.core/fn % cljs.core/map? cljs.core/contains?]}, :doc nil}