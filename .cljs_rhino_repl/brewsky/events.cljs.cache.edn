{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name brewsky.events, :imports nil, :requires {re-frame.core re-frame.core, s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha, db brewsky.db, brewsky.db brewsky.db}, :uses {app-db brewsky.db, reg-event-db re-frame.core, after re-frame.core}, :defs {check-and-throw {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/src/brewsky/events.cljs", :line 11, :column 7, :end-line 11, :end-column 22, :arglists (quote ([spec db [event]])), :doc "Throw an exception if db doesn't have a valid spec."}, :name brewsky.events/check-and-throw, :variadic false, :file "/code/src/apps/brewsky/src/brewsky/events.cljs", :end-column 22, :method-params ([spec db p__50709]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([spec db [event]])), :doc "Throw an exception if db doesn't have a valid spec."}, validate-spec {:name brewsky.events/validate-spec, :file "/code/src/apps/brewsky/src/brewsky/events.cljs", :line 18, :column 1, :end-line 18, :end-column 19, :meta {:file "/code/src/apps/brewsky/src/brewsky/events.cljs", :line 18, :column 6, :end-line 18, :end-column 19}, :tag #{cljs.core/IVector any}}}, :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{:initialize-db :set-greeting :brewsky.db/app-db :greeting}, :order [:brewsky.db/app-db :initialize-db :set-greeting :greeting]}, :doc nil}