{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{find}, :name rewrite-clj.zip.findz, :imports nil, :requires {base rewrite-clj.zip.base, clojure.zip clojure.zip, rewrite-clj.node rewrite-clj.node, ws rewrite-clj.zip.whitespace, m rewrite-clj.zip.move, rewrite-clj.zip.whitespace rewrite-clj.zip.whitespace, rewrite-clj.zip.move rewrite-clj.zip.move, node rewrite-clj.node, z clojure.zip, rewrite-clj.zip.base rewrite-clj.zip.base}, :uses nil, :defs {find {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 32, :column 7, :end-line 32, :end-column 11, :arglists (quote ([zloc p?] [zloc f p?])), :doc "Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}, :method-params ([zloc p?] [zloc f p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists ([zloc p?] [zloc f p?]), :doc "Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location."}, find-token {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 112, :column 7, :end-line 112, :end-column 17, :arglists (quote ([zloc p?] [zloc f p?])), :doc "Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-token, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}, :method-params ([zloc p?] [zloc f p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 3, :fn-var true, :arglists ([zloc p?] [zloc f p?]), :doc "Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."}, in-range? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([{:keys [row col end-row end-col]} {r :row, c :col}]))}, :name rewrite-clj.zip.findz/in-range?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 16, :method-params ([p__54696 p__54697]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [row col end-row end-col]} {r :row, c :col}]))}, find-next-depth-first {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 79, :column 7, :end-line 79, :end-column 28, :arglists (quote ([zloc p?])), :doc "Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way."}, :name rewrite-clj.zip.findz/find-next-depth-first, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 28, :method-params ([zloc p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc p?])), :doc "Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way."}, find-next-token {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 122, :column 7, :end-line 122, :end-column 22, :arglists (quote ([zloc p?] [zloc f p?])), :doc "Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-next-token, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}, :method-params ([zloc p?] [zloc f p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists ([zloc p?] [zloc f p?]), :doc "Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."}, tag-predicate {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 11, :column 8, :end-line 11, :end-column 21, :private true, :arglists (quote ([t & [additional]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(t [additional])], :arglists ([t & [additional]]), :arglists-meta (nil)}}, :private true, :name rewrite-clj.zip.findz/tag-predicate, :variadic true, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(t [additional])], :arglists ([t & [additional]]), :arglists-meta (nil)}, :method-params [(t [additional])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists ([t & [additional]])}, find-tag-by-pos {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 105, :column 7, :end-line 105, :end-column 22, :arglists (quote ([zloc pos t])), :doc "Find node with the given tag and pos depth-first from initial zipper location."}, :name rewrite-clj.zip.findz/find-tag-by-pos, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 22, :method-params ([zloc pos t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 3, :fn-var true, :arglists (quote ([zloc pos t])), :doc "Find node with the given tag and pos depth-first from initial zipper location."}, find-tag {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 86, :column 7, :end-line 86, :end-column 15, :arglists (quote ([zloc t] [zloc f t])), :doc "Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc t] [zloc f t]), :arglists ([zloc t] [zloc f t]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-tag, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc t] [zloc f t]), :arglists ([zloc t] [zloc f t]), :arglists-meta (nil nil)}, :method-params ([zloc t] [zloc f t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 3, :fn-var true, :arglists ([zloc t] [zloc f t]), :doc "Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location."}, find-value {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 131, :column 7, :end-line 131, :end-column 17, :arglists (quote ([zloc v] [zloc f v])), :doc "Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc v] [zloc f v]), :arglists ([zloc v] [zloc f v]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-value, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc v] [zloc f v]), :arglists ([zloc v] [zloc f v]), :arglists-meta (nil nil)}, :method-params ([zloc v] [zloc f v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 3, :fn-var true, :arglists ([zloc v] [zloc f v]), :doc "Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."}, find-next {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 70, :column 7, :end-line 70, :end-column 16, :arglists (quote ([zloc p?] [zloc f p?])), :doc "Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-next, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc p?] [zloc f p?]), :arglists ([zloc p?] [zloc f p?]), :arglists-meta (nil nil)}, :method-params ([zloc p?] [zloc f p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 3, :fn-var true, :arglists ([zloc p?] [zloc f p?]), :doc "Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location."}, find-next-tag {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 94, :column 7, :end-line 94, :end-column 20, :arglists (quote ([zloc t] [zloc f t])), :doc "Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc t] [zloc f t]), :arglists ([zloc t] [zloc f t]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-next-tag, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc t] [zloc f t]), :arglists ([zloc t] [zloc f t]), :arglists-meta (nil nil)}, :method-params ([zloc t] [zloc f t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists ([zloc t] [zloc f t]), :doc "Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location."}, find-last-by-pos {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 48, :column 7, :end-line 48, :end-column 23, :arglists (quote ([zloc pos] [zloc pos p?])), :doc "Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc pos] [zloc pos p?]), :arglists ([zloc pos] [zloc pos p?]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-last-by-pos, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc pos] [zloc pos p?]), :arglists ([zloc pos] [zloc pos p?]), :arglists-meta (nil nil)}, :method-params ([zloc pos] [zloc pos p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists ([zloc pos] [zloc pos p?]), :doc "Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location."}, find-depth-first {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 63, :column 7, :end-line 63, :end-column 23, :arglists (quote ([zloc p?])), :doc "Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way."}, :name rewrite-clj.zip.findz/find-depth-first, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 23, :method-params ([zloc p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc p?])), :doc "Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way."}, find-next-value {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :line 143, :column 7, :end-line 143, :end-column 22, :arglists (quote ([zloc v] [zloc f v])), :doc "Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc v] [zloc f v]), :arglists ([zloc v] [zloc f v]), :arglists-meta (nil nil)}}, :name rewrite-clj.zip.findz/find-next-value, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/findz.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([zloc v] [zloc f v]), :arglists ([zloc v] [zloc f v]), :arglists-meta (nil nil)}, :method-params ([zloc v] [zloc f v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 3, :fn-var true, :arglists ([zloc v] [zloc f v]), :doc "Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:end-row :else :token :col :end-col :row}, :order [:row :col :end-row :end-col :else :token]}, :doc nil}