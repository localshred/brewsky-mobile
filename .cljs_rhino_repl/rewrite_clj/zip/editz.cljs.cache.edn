{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{replace}, :name rewrite-clj.zip.editz, :imports nil, :requires {base rewrite-clj.zip.base, rewrite-clj.zip.removez rewrite-clj.zip.removez, clojure.zip clojure.zip, rewrite-clj.node rewrite-clj.node, u rewrite-clj.zip.utils, r rewrite-clj.zip.removez, ws rewrite-clj.zip.whitespace, n rewrite-clj.node, m rewrite-clj.zip.move, rewrite-clj.zip.whitespace rewrite-clj.zip.whitespace, rewrite-clj.zip.move rewrite-clj.zip.move, z clojure.zip, rewrite-clj.zip.utils rewrite-clj.zip.utils, rewrite-clj.zip.base rewrite-clj.zip.base}, :uses nil, :defs {replace {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 13, :column 7, :end-line 13, :end-column 14, :arglists (quote ([zloc value])), :doc "Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"}, :name rewrite-clj.zip.editz/replace, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 14, :method-params ([zloc value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc value])), :doc "Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)"}, edit-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 20, :column 8, :end-line 20, :end-column 17, :private true, :arglists (quote ([node f])), :doc "Create s-expression from node, apply the function and create\n   node from the result."}, :private true, :name rewrite-clj.zip.editz/edit-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 17, :method-params ([node f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node f])), :doc "Create s-expression from node, apply the function and create\n   node from the result."}, edit {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 28, :column 7, :end-line 28, :end-column 11, :arglists (quote ([zloc f & args])), :doc "Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(zloc f args)], :arglists ([zloc f & args]), :arglists-meta (nil)}}, :name rewrite-clj.zip.editz/edit, :variadic true, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(zloc f args)], :arglists ([zloc f & args]), :arglists-meta (nil)}, :method-params [(zloc f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists ([zloc f & args]), :doc "Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)"}, splice {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 39, :column 7, :end-line 39, :end-column 13, :arglists (quote ([zloc])), :doc "Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "}, :name rewrite-clj.zip.editz/splice, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 13, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   "}, edit-token {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 63, :column 8, :end-line 63, :end-column 18, :private true, :arglists (quote ([zloc str-fn]))}, :private true, :name rewrite-clj.zip.editz/edit-token, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 18, :method-params ([zloc str-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc str-fn]))}, edit-multi-line {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 71, :column 8, :end-line 71, :end-column 23, :private true, :arglists (quote ([zloc line-fn]))}, :private true, :name rewrite-clj.zip.editz/edit-multi-line, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 23, :method-params ([zloc line-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc line-fn]))}, prefix {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 77, :column 7, :end-line 77, :end-column 13, :arglists (quote ([zloc s]))}, :name rewrite-clj.zip.editz/prefix, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 13, :method-params ([zloc s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc s]))}, suffix {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :line 87, :column 7, :end-line 87, :end-column 13, :arglists (quote ([zloc s]))}, :name rewrite-clj.zip.editz/suffix, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/editz.cljs", :end-column 13, :method-params ([zloc s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc s]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:lines}, :order [:lines]}, :doc nil}