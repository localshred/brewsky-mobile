{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{seq? vector? map set? map? get list? assoc}, :name rewrite-clj.zip.seqz, :imports nil, :requires {base rewrite-clj.zip.base, i rewrite-clj.zip.insert, clojure.zip clojure.zip, rewrite-clj.zip.findz rewrite-clj.zip.findz, m rewrite-clj.zip.move, rewrite-clj.zip.insert rewrite-clj.zip.insert, rewrite-clj.zip.move rewrite-clj.zip.move, e rewrite-clj.zip.editz, rewrite-clj.zip.editz rewrite-clj.zip.editz, z clojure.zip, rewrite-clj.zip.base rewrite-clj.zip.base, f rewrite-clj.zip.findz}, :uses nil, :defs {seq? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([zloc]))}, :name rewrite-clj.zip.seqz/seq?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 11, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc]))}, vector? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 22, :column 7, :end-line 22, :end-column 14, :arglists (quote ([zloc]))}, :name rewrite-clj.zip.seqz/vector?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 14, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc]))}, map {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 76, :column 7, :end-line 76, :end-column 10, :arglists (quote ([f zloc])), :doc "Apply function to all value nodes in the given seq node. Iterates over\n   value nodes of maps but over each element of a seq."}, :name rewrite-clj.zip.seqz/map, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 10, :method-params ([f zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f zloc])), :doc "Apply function to all value nodes in the given seq node. Iterates over\n   value nodes of maps but over each element of a seq."}, map-seq {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 36, :column 8, :end-line 36, :end-column 15, :private true, :arglists (quote ([f zloc]))}, :private true, :name rewrite-clj.zip.seqz/map-seq, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 15, :method-params ([f zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f zloc]))}, set? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 26, :column 7, :end-line 26, :end-column 11, :arglists (quote ([zloc]))}, :name rewrite-clj.zip.seqz/set?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 11, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc]))}, map? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 30, :column 7, :end-line 30, :end-column 11, :arglists (quote ([zloc]))}, :name rewrite-clj.zip.seqz/map?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 11, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc]))}, get {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 87, :column 7, :end-line 87, :end-column 10, :arglists (quote ([zloc k])), :doc "If a map is given, get element with the given key; if a seq is given, get nth element."}, :name rewrite-clj.zip.seqz/get, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 10, :method-params ([zloc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc k])), :doc "If a map is given, get element with the given key; if a seq is given, get nth element."}, map-keys {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 64, :column 7, :end-line 64, :end-column 15, :arglists (quote ([f zloc])), :doc "Apply function to all key nodes of the given map node."}, :name rewrite-clj.zip.seqz/map-keys, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 15, :method-params ([f zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f zloc])), :doc "Apply function to all key nodes of the given map node."}, map-vals {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 50, :column 7, :end-line 50, :end-column 15, :arglists (quote ([f zloc])), :doc "Apply function to all value nodes of the given map node."}, :name rewrite-clj.zip.seqz/map-vals, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 15, :method-params ([f zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f zloc])), :doc "Apply function to all value nodes of the given map node."}, list? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([zloc]))}, :name rewrite-clj.zip.seqz/list?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 12, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc]))}, assoc {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :line 99, :column 7, :end-line 99, :end-column 12, :arglists (quote ([zloc k v])), :doc "Set map/seq element to the given value."}, :name rewrite-clj.zip.seqz/assoc, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/seqz.cljs", :end-column 12, :method-params ([zloc k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 3, :fn-var true, :arglists (quote ([zloc k v])), :doc "Set map/seq element to the given value."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:vector :list :set :map :forms}, :order [:vector :list :set :map :forms]}, :doc nil}