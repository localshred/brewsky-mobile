{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rewrite-clj.zip.insert, :imports nil, :requires {base rewrite-clj.zip.base, rewrite-clj.zip.base rewrite-clj.zip.base, ws rewrite-clj.zip.whitespace, rewrite-clj.zip.whitespace rewrite-clj.zip.whitespace, node rewrite-clj.node, rewrite-clj.node rewrite-clj.node, z clojure.zip, clojure.zip clojure.zip}, :uses nil, :defs {space {:name rewrite-clj.zip.insert/space, :file ".cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :line 7, :column 1, :end-line 7, :end-column 21, :private true, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :line 7, :column 16, :end-line 7, :end-column 21, :private true}, :tag any}, insert {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :line 10, :column 8, :end-line 10, :end-column 14, :private true, :arglists (quote ([move-fn insert-fn prefix zloc item])), :doc "Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space."}, :private true, :name rewrite-clj.zip.insert/insert, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :end-column 14, :method-params ([move-fn insert-fn prefix zloc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 5, :fn-var true, :arglists (quote ([move-fn insert-fn prefix zloc item])), :doc "Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space."}, insert-right {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :line 21, :column 7, :end-line 21, :end-column 19, :arglists (quote ([zloc item])), :doc "Insert item to the right of the current location. Will insert a space if necessary."}, :name rewrite-clj.zip.insert/insert-right, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :end-column 19, :method-params ([zloc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc item])), :doc "Insert item to the right of the current location. Will insert a space if necessary."}, insert-left {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :line 30, :column 7, :end-line 30, :end-column 18, :arglists (quote ([zloc item])), :doc "Insert item to the right of the left location. Will insert a space if necessary."}, :name rewrite-clj.zip.insert/insert-left, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :end-column 18, :method-params ([zloc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc item])), :doc "Insert item to the right of the left location. Will insert a space if necessary."}, insert-child {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :line 39, :column 7, :end-line 39, :end-column 19, :arglists (quote ([zloc item])), :doc "Insert item as first child of the current node. Will insert a space if necessary."}, :name rewrite-clj.zip.insert/insert-child, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :end-column 19, :method-params ([zloc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc item])), :doc "Insert item as first child of the current node. Will insert a space if necessary."}, append-child {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([zloc item])), :doc "Insert item as last child of the current node. Will insert a space if necessary."}, :name rewrite-clj.zip.insert/append-child, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/insert.cljs", :end-column 19, :method-params ([zloc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc item])), :doc "Insert item as last child of the current node. Will insert a space if necessary."}}, :require-macros nil, :doc nil}