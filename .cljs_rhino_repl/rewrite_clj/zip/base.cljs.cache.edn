{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{print}, :name rewrite-clj.zip.base, :imports nil, :requires {node rewrite-clj.node, rewrite-clj.node rewrite-clj.node, p rewrite-clj.parser, rewrite-clj.parser rewrite-clj.parser, ws rewrite-clj.zip.whitespace, rewrite-clj.zip.whitespace rewrite-clj.zip.whitespace, z clojure.zip, clojure.zip clojure.zip}, :uses nil, :defs {edn* {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 10, :column 7, :end-line 10, :end-column 11, :arglists (quote ([node])), :doc "Create zipper over the given Clojure/EDN node."}, :name rewrite-clj.zip.base/edn*, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 11, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Create zipper over the given Clojure/EDN node."}, edn {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 19, :column 7, :end-line 19, :end-column 10, :arglists (quote ([node])), :doc "Create zipper over the given Clojure/EDN node and move\n   to the first non-whitespace/non-comment child."}, :name rewrite-clj.zip.base/edn, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 10, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Create zipper over the given Clojure/EDN node and move\n   to the first non-whitespace/non-comment child."}, tag {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 31, :column 7, :end-line 31, :end-column 10, :arglists (quote ([zloc])), :doc "Get tag of node at the current zipper location."}, :name rewrite-clj.zip.base/tag, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 10, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Get tag of node at the current zipper location."}, sexpr {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 36, :column 7, :end-line 36, :end-column 12, :arglists (quote ([zloc])), :doc "Get sexpr represented by the given node."}, :name rewrite-clj.zip.base/sexpr, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 12, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Get sexpr represented by the given node."}, child-sexprs {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 41, :column 7, :end-line 41, :end-column 19, :arglists (quote ([zloc])), :doc "Get children as s-expressions."}, :name rewrite-clj.zip.base/child-sexprs, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 19, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Get children as s-expressions."}, length {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 46, :column 7, :end-line 46, :end-column 13, :arglists (quote ([zloc])), :doc "Get length of printable string for the given zipper location."}, :name rewrite-clj.zip.base/length, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 13, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Get length of printable string for the given zipper location."}, of-string {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 54, :column 7, :end-line 54, :end-column 16, :arglists (quote ([s])), :doc "Create zipper from String."}, :name rewrite-clj.zip.base/of-string, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create zipper from String."}, string {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 62, :column 7, :end-line 62, :end-column 13, :arglists (quote ([zloc])), :doc "Create string representing the current zipper location."}, :name rewrite-clj.zip.base/string, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 13, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Create string representing the current zipper location."}, root-string {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/base.cljs", :line 67, :column 7, :end-line 67, :end-column 18, :arglists (quote ([zloc])), :doc "Create string representing the zipped-up zipper."}, :name rewrite-clj.zip.base/root-string, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/base.cljs", :end-column 18, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Create string representing the zipped-up zipper."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:forms}, :order [:forms]}, :doc nil}