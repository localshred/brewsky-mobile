{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{remove}, :name rewrite-clj.zip.removez, :imports nil, :requires {m rewrite-clj.zip.move, rewrite-clj.zip.move rewrite-clj.zip.move, u rewrite-clj.zip.utils, rewrite-clj.zip.utils rewrite-clj.zip.utils, ws rewrite-clj.zip.whitespace, rewrite-clj.zip.whitespace rewrite-clj.zip.whitespace, z clojure.zip, clojure.zip clojure.zip}, :uses nil, :defs {remove-trailing-space {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :line 9, :column 8, :end-line 9, :end-column 29, :private true, :arglists (quote ([zloc p?])), :doc "Remove all whitespace following a given node."}, :private true, :name rewrite-clj.zip.removez/remove-trailing-space, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :end-column 29, :method-params ([zloc p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc p?])), :doc "Remove all whitespace following a given node."}, remove-preceding-space {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :line 14, :column 8, :end-line 14, :end-column 30, :private true, :arglists (quote ([zloc p?])), :doc "Remove all whitespace preceding a given node."}, :private true, :name rewrite-clj.zip.removez/remove-preceding-space, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :end-column 30, :method-params ([zloc p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc p?])), :doc "Remove all whitespace preceding a given node."}, remove {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :line 19, :column 7, :end-line 19, :end-column 13, :arglists (quote ([zloc])), :doc "Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."}, :name rewrite-clj.zip.removez/remove, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :end-column 13, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."}, remove-preserve-newline {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :line 48, :column 7, :end-line 48, :end-column 30, :arglists (quote ([zloc])), :doc "Same as remove but preserves newlines"}, :name rewrite-clj.zip.removez/remove-preserve-newline, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/removez.cljs", :end-column 30, :method-params ([zloc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zloc])), :doc "Same as remove but preserves newlines"}}, :require-macros nil, :doc nil}