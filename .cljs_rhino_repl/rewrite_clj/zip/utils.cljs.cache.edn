{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name rewrite-clj.zip.utils, :imports nil, :requires {z clojure.zip, clojure.zip clojure.zip}, :uses nil, :defs {update-in-path {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 6, :column 8, :end-line 6, :end-column 22, :private true, :arglists (quote ([[node path :as loc] k f]))}, :private true, :name rewrite-clj.zip.utils/update-in-path, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 22, :method-params ([p__54617 k f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[node path :as loc] k f]))}, remove-right {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([loc])), :doc "Remove right sibling of the current node (if there is one)."}, :name rewrite-clj.zip.utils/remove-right, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 19, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Remove right sibling of the current node (if there is one)."}, remove-left {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 20, :column 7, :end-line 20, :end-column 18, :arglists (quote ([loc])), :doc "Remove left sibling of the current node (if there is one)."}, :name rewrite-clj.zip.utils/remove-left, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 18, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Remove left sibling of the current node (if there is one)."}, remove-while {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 26, :column 7, :end-line 26, :end-column 19, :arglists (quote ([zloc p?]))}, :name rewrite-clj.zip.utils/remove-while, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 19, :method-params ([zloc p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc p?]))}, remove-right-while {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 35, :column 7, :end-line 35, :end-column 25, :arglists (quote ([zloc p?])), :doc "Remove elements to the right of the current zipper location as long as\n   the given predicate matches."}, :name rewrite-clj.zip.utils/remove-right-while, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 25, :method-params ([zloc p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc p?])), :doc "Remove elements to the right of the current zipper location as long as\n   the given predicate matches."}, remove-left-while {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 46, :column 7, :end-line 46, :end-column 24, :arglists (quote ([zloc p?])), :doc "Remove elements to the left of the current zipper location as long as\n   the given predicate matches."}, :name rewrite-clj.zip.utils/remove-left-while, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 24, :method-params ([zloc p?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zloc p?])), :doc "Remove elements to the left of the current zipper location as long as\n   the given predicate matches."}, remove-and-move-left {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 59, :column 7, :end-line 59, :end-column 27, :arglists (quote ([[_ {:keys [l], :as path} :as loc]])), :doc "Remove current node and move left. If current node is at the leftmost\n   location, returns `nil`."}, :name rewrite-clj.zip.utils/remove-and-move-left, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 27, :method-params ([p__54627]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[_ {:keys [l], :as path} :as loc]])), :doc "Remove current node and move left. If current node is at the leftmost\n   location, returns `nil`."}, remove-and-move-right {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 70, :column 7, :end-line 70, :end-column 28, :arglists (quote ([[_ {:keys [r], :as path} :as loc]])), :doc "Remove current node and move right. If current node is at the rightmost\n   location, returns `nil`."}, :name rewrite-clj.zip.utils/remove-and-move-right, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 28, :method-params ([p__54638]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[_ {:keys [r], :as path} :as loc]])), :doc "Remove current node and move right. If current node is at the rightmost\n   location, returns `nil`."}, remove-and-move-up {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :line 82, :column 7, :end-line 82, :end-column 25, :arglists (quote ([loc]))}, :name rewrite-clj.zip.utils/remove-and-move-up, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/zip/utils.cljs", :end-column 25, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:ppath :r :l :pnodes :changed?}, :order [:changed? :r :l :ppath :pnodes]}, :doc nil}