{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name rewrite-clj.node.keyword, :imports nil, :requires {node rewrite-clj.node.protocols, rewrite-clj.node.protocols rewrite-clj.node.protocols}, :uses nil, :defs {KeywordNode {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable rewrite-clj.node.keyword/Object cljs.core/IPrintWithWriter cljs.core/IIterable rewrite-clj.node.protocols/Node cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rewrite-clj.node.keyword/KeywordNode, :file ".cljs_rhino_repl/rewrite_clj/node/keyword.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 6, :record true, :end-line 6, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->KeywordNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/keyword.cljs", :line 6, :column 12, :end-line 6, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([k namespaced?]))}, :name rewrite-clj.node.keyword/->KeywordNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/keyword.cljs", :end-column 23, :method-params ([k namespaced?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k namespaced?]))}, map->KeywordNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/keyword.cljs", :line 6, :column 12, :end-line 6, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__54866]))}, :name rewrite-clj.node.keyword/map->KeywordNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/keyword.cljs", :end-column 23, :method-params ([G__54866]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54866]))}, keyword-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/keyword.cljs", :line 43, :column 7, :end-line 43, :end-column 19, :arglists (quote ([k & [namespaced?]])), :doc "Create node representing a keyword. If `namespaced?` is given as `true`\n   a keyword à la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [namespaced?])], :arglists ([k & [namespaced?]]), :arglists-meta (nil)}}, :name rewrite-clj.node.keyword/keyword-node, :variadic true, :file ".cljs_rhino_repl/rewrite_clj/node/keyword.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [namespaced?])], :arglists ([k & [namespaced?]]), :arglists-meta (nil)}, :method-params [(k [namespaced?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists ([k & [namespaced?]]), :doc "Create node representing a keyword. If `namespaced?` is given as `true`\n   a keyword à la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:k :token :namespaced? k namespaced?}, :order [:k :namespaced? :token k namespaced?]}, :doc nil}