{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rewrite-clj.node.seq, :imports nil, :requires {node rewrite-clj.node.protocols, rewrite-clj.node.protocols rewrite-clj.node.protocols}, :uses nil, :defs {vector-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([children])), :doc "Create a node representing an EDN vector."}, :name rewrite-clj.node.seq/vector-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 18, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create a node representing an EDN vector."}, wrap-list {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 7, :column 7, :end-line 7, :end-column 16, :arglists (quote ([s]))}, :name rewrite-clj.node.seq/wrap-list, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ->SeqNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 13, :column 12, :end-line 13, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([tag wrap-fn wrap-length seq-fn children]))}, :name rewrite-clj.node.seq/->SeqNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 19, :method-params ([tag wrap-fn wrap-length seq-fn children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 13, :end-line 13, :max-fixed-arity 5, :fn-var true, :arglists (quote ([tag wrap-fn wrap-length seq-fn children]))}, list-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([children])), :doc "Create a node representing an EDN list."}, :name rewrite-clj.node.seq/list-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 16, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create a node representing an EDN list."}, map-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 62, :column 7, :end-line 62, :end-column 15, :arglists (quote ([children])), :doc "Create a node representing an EDN map."}, :name rewrite-clj.node.seq/map-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 15, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create a node representing an EDN map."}, wrap-map {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 9, :column 7, :end-line 9, :end-column 15, :arglists (quote ([s]))}, :name rewrite-clj.node.seq/wrap-map, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, map->SeqNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 13, :column 12, :end-line 13, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__54942]))}, :name rewrite-clj.node.seq/map->SeqNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 19, :method-params ([G__54942]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54942]))}, set-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([children])), :doc "Create a node representing an EDN set."}, :name rewrite-clj.node.seq/set-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 15, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create a node representing an EDN set."}, wrap-vec {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 6, :column 7, :end-line 6, :end-column 15, :arglists (quote ([s]))}, :name rewrite-clj.node.seq/wrap-vec, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, SeqNode {:num-fields 5, :protocols #{cljs.core/IRecord rewrite-clj.node.seq/Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted rewrite-clj.node.protocols/InnerNode cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable rewrite-clj.node.protocols/Node cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rewrite-clj.node.seq/SeqNode, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 13, :record true, :end-line 13, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, wrap-set {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/seq.cljs", :line 8, :column 7, :end-line 8, :end-column 15, :arglists (quote ([s]))}, :name rewrite-clj.node.seq/wrap-set, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/seq.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{tag wrap-length :children children :vector :seq-fn :list :wrap-fn seq-fn :wrap-length :tag :set wrap-fn :map}, :order [:tag :wrap-fn :wrap-length :seq-fn :children tag wrap-fn wrap-length seq-fn children :list :vector :set :map]}, :doc nil}