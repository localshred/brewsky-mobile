{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rewrite-clj.node.quote, :imports nil, :requires {node rewrite-clj.node.protocols, rewrite-clj.node.protocols rewrite-clj.node.protocols}, :uses nil, :defs {QuoteNode {:num-fields 4, :protocols #{cljs.core/IRecord rewrite-clj.node.quote/Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted rewrite-clj.node.protocols/InnerNode cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable rewrite-clj.node.protocols/Node cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rewrite-clj.node.quote/QuoteNode, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 6, :record true, :end-line 6, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->QuoteNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/quote.cljs", :line 6, :column 12, :end-line 6, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([tag prefix sym children]))}, :name rewrite-clj.node.quote/->QuoteNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 21, :method-params ([tag prefix sym children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 6, :end-line 6, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tag prefix sym children]))}, map->QuoteNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/quote.cljs", :line 6, :column 12, :end-line 6, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__54842]))}, :name rewrite-clj.node.quote/map->QuoteNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 21, :method-params ([G__54842]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54842]))}, ->node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/quote.cljs", :line 32, :column 8, :end-line 32, :end-column 14, :private true, :arglists (quote ([t prefix sym children]))}, :private true, :name rewrite-clj.node.quote/->node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 14, :method-params ([t prefix sym children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 4, :fn-var true, :arglists (quote ([t prefix sym children]))}, quote-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/quote.cljs", :line 37, :column 7, :end-line 37, :end-column 17, :arglists (quote ([children])), :doc "Create node representing a quoted form.\n   Takes either a seq of nodes or a single one."}, :name rewrite-clj.node.quote/quote-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 17, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create node representing a quoted form.\n   Takes either a seq of nodes or a single one."}, syntax-quote-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/quote.cljs", :line 47, :column 7, :end-line 47, :end-column 24, :arglists (quote ([children])), :doc "Create node representing a syntax-quoted form.\n   Takes either a seq of nodes or a single one."}, :name rewrite-clj.node.quote/syntax-quote-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 24, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create node representing a syntax-quoted form.\n   Takes either a seq of nodes or a single one."}, unquote-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/quote.cljs", :line 57, :column 7, :end-line 57, :end-column 19, :arglists (quote ([children])), :doc "Create node representing an unquoted form. (`~...`)\n   Takes either a seq of nodes or a single one."}, :name rewrite-clj.node.quote/unquote-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 19, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create node representing an unquoted form. (`~...`)\n   Takes either a seq of nodes or a single one."}, unquote-splicing-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/quote.cljs", :line 67, :column 7, :end-line 67, :end-column 28, :arglists (quote ([children])), :doc "Create node representing an unquote-spliced form. (`~@...`)\n   Takes either a seq of nodes or a single one."}, :name rewrite-clj.node.quote/unquote-splicing-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/quote.cljs", :end-column 28, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create node representing an unquote-spliced form. (`~@...`)\n   Takes either a seq of nodes or a single one."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{tag :children :unquote-splicing :unquote children unquote-splicing :sym :prefix unquote :syntax-quote :quote sym prefix :tag quote}, :order [:tag :prefix :sym :children tag prefix sym children :quote quote :syntax-quote :unquote unquote :unquote-splicing unquote-splicing]}, :doc nil}