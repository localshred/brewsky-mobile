{:rename-macros {}, :renames {}, :externs {parseInt {}, Error {}}, :use-macros {}, :excludes #{}, :name rewrite-clj.node.fn, :imports nil, :requires {node rewrite-clj.node.protocols, rewrite-clj.node.protocols rewrite-clj.node.protocols, w clojure.walk, clojure.walk clojure.walk}, :uses nil, :defs {construct-fn {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/fn.cljs", :line 7, :column 8, :end-line 7, :end-column 20, :private true, :arglists (quote ([syms vararg body])), :doc "Construct function form."}, :private true, :name rewrite-clj.node.fn/construct-fn, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 20, :method-params ([syms vararg body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([syms vararg body])), :doc "Construct function form."}, sym-index {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/fn.cljs", :line 19, :column 8, :end-line 19, :end-column 17, :private true, :arglists (quote ([n])), :doc "Get index based on the substring following the parameter's `%`.\n   Zero means vararg."}, :private true, :name rewrite-clj.node.fn/sym-index, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 17, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Get index based on the substring following the parameter's `%`.\n   Zero means vararg."}, symbol->gensym {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/fn.cljs", :line 29, :column 8, :end-line 29, :end-column 22, :private true, :arglists (quote ([sym-seq vararg? max-n sym])), :doc "If symbol starting with `%`, convert to respective gensym."}, :private true, :name rewrite-clj.node.fn/symbol->gensym, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 22, :method-params ([sym-seq vararg? max-n sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 4, :fn-var true, :arglists (quote ([sym-seq vararg? max-n sym])), :doc "If symbol starting with `%`, convert to respective gensym."}, fn-walk {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/fn.cljs", :line 42, :column 8, :end-line 42, :end-column 15, :private true, :arglists (quote ([form])), :doc "Walk the form and create an expand function form."}, :private true, :name rewrite-clj.node.fn/fn-walk, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 15, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Walk the form and create an expand function form."}, FnNode {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted rewrite-clj.node.protocols/InnerNode cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable rewrite-clj.node.fn/Object rewrite-clj.node.protocols/Node cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rewrite-clj.node.fn/FnNode, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 65, :record true, :end-line 65, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->FnNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/fn.cljs", :line 65, :column 12, :end-line 65, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([children]))}, :name rewrite-clj.node.fn/->FnNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 18, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children]))}, map->FnNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/fn.cljs", :line 65, :column 12, :end-line 65, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__54932]))}, :name rewrite-clj.node.fn/map->FnNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 18, :method-params ([G__54932]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54932]))}, fn-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/fn.cljs", :line 94, :column 7, :end-line 94, :end-column 14, :arglists (quote ([children])), :doc "Create node representing an anonymous function."}, :name rewrite-clj.node.fn/fn-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/fn.cljs", :end-column 14, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Create node representing an anonymous function."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{& :children :fn :else children fn*}, :order [fn* & :else :children :fn children]}, :doc nil}