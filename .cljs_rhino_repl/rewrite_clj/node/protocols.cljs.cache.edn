{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name rewrite-clj.node.protocols, :imports nil, :requires {s clojure.string, clojure.string clojure.string}, :uses nil, :defs {child-sexprs {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([node])), :doc "Get all child s-expressions for the given node."}, :name rewrite-clj.node.protocols/child-sexprs, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 19, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Get all child s-expressions for the given node."}, tag {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 8, :column 4, :end-line 8, :end-column 7, :protocol rewrite-clj.node.protocols/Node, :doc "Keyword representing the type of the node.", :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/Node, :name rewrite-clj.node.protocols/tag, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 7, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Keyword representing the type of the node."}, children {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 52, :column 4, :end-line 52, :end-column 12, :protocol rewrite-clj.node.protocols/InnerNode, :doc "Get child nodes.", :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/InnerNode, :name rewrite-clj.node.protocols/children, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 12, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Get child nodes."}, sexprs {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 29, :column 7, :end-line 29, :end-column 13, :arglists (quote ([nodes])), :doc "Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms."}, :name rewrite-clj.node.protocols/sexprs, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 13, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms."}, inner? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 50, :column 4, :end-line 50, :end-column 10, :protocol rewrite-clj.node.protocols/InnerNode, :doc "Check whether the node can contain children.", :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/InnerNode, :name rewrite-clj.node.protocols/inner?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Check whether the node can contain children."}, replace-children {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 54, :column 4, :end-line 54, :end-column 20, :protocol rewrite-clj.node.protocols/InnerNode, :doc "Replace the node's children.", :arglists (quote ([_ children]))}, :protocol rewrite-clj.node.protocols/InnerNode, :name rewrite-clj.node.protocols/replace-children, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 20, :method-params ([_ children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ children])), :doc "Replace the node's children."}, InnerNode {:meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 48, :column 14, :end-line 48, :end-column 23, :doc "Protocol for non-leaf EDN/Clojure nodes.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {inner? [[_]], children [[_]], replace-children [[_ children]]}}}, :protocol-symbol true, :name rewrite-clj.node.protocols/InnerNode, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 23, :column 1, :line 48, :protocol-info {:methods {inner? [[_]], children [[_]], replace-children [[_ children]]}}, :info nil, :end-line 48, :tag any, :impls #{object}, :doc "Protocol for non-leaf EDN/Clojure nodes.", :jsdoc ("@interface")}, printable-only? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 10, :column 4, :end-line 10, :end-column 19, :protocol rewrite-clj.node.protocols/Node, :doc "Return true if the node cannot be converted to an s-expression\n     element.", :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/Node, :name rewrite-clj.node.protocols/printable-only?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 19, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Return true if the node cannot be converted to an s-expression\n     element."}, sexpr {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 13, :column 4, :end-line 13, :end-column 9, :protocol rewrite-clj.node.protocols/Node, :doc "Convert node to s-expression.", :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/Node, :name rewrite-clj.node.protocols/sexpr, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 9, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Convert node to s-expression."}, concat-strings {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 42, :column 7, :end-line 42, :end-column 21, :arglists (quote ([nodes])), :doc "Convert nodes to strings and concatenate them."}, :name rewrite-clj.node.protocols/concat-strings, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 21, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Convert nodes to strings and concatenate them."}, string {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 17, :column 4, :end-line 17, :end-column 10, :protocol rewrite-clj.node.protocols/Node, :doc "Convert node to printable string.", :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/Node, :name rewrite-clj.node.protocols/string, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Convert node to printable string."}, assert-sexpr-count {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 97, :column 7, :end-line 97, :end-column 25, :arglists (quote ([nodes c]))}, :name rewrite-clj.node.protocols/assert-sexpr-count, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 25, :method-params ([nodes c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nodes c]))}, sum-lengths {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 37, :column 7, :end-line 37, :end-column 18, :arglists (quote ([nodes])), :doc "Sum up lengths of the given nodes."}, :name rewrite-clj.node.protocols/sum-lengths, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 18, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Sum up lengths of the given nodes."}, assert-single-sexpr {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 103, :column 7, :end-line 103, :end-column 26, :arglists (quote ([nodes]))}, :name rewrite-clj.node.protocols/assert-single-sexpr, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 26, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes]))}, length {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 15, :column 4, :end-line 15, :end-column 10, :protocol rewrite-clj.node.protocols/Node, :doc "Get number of characters for the string version of this node.", :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/Node, :name rewrite-clj.node.protocols/length, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Get number of characters for the string version of this node."}, NodeCoerceable {:meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 72, :column 14, :end-line 72, :end-column 28, :doc "Protocol for values that can be coerced to nodes.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {coerce [[_]]}}}, :protocol-symbol true, :name rewrite-clj.node.protocols/NodeCoerceable, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 28, :column 1, :line 72, :protocol-info {:methods {coerce [[_]]}}, :info nil, :end-line 72, :tag any, :impls #{}, :doc "Protocol for values that can be coerced to nodes.", :jsdoc ("@interface")}, Node {:meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 6, :column 14, :end-line 6, :end-column 18, :doc "Protocol for EDN/Clojure nodes.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {tag [[_]], printable-only? [[_]], sexpr [[_]], length [[_]], string [[_]]}}}, :protocol-symbol true, :name rewrite-clj.node.protocols/Node, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 18, :column 1, :line 6, :protocol-info {:methods {tag [[_]], printable-only? [[_]], sexpr [[_]], length [[_]], string [[_]]}}, :info nil, :end-line 6, :tag any, :impls #{object}, :doc "Protocol for EDN/Clojure nodes.", :jsdoc ("@interface")}, coerce {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :line 74, :column 4, :end-line 74, :end-column 10, :protocol rewrite-clj.node.protocols/NodeCoerceable, :doc nil, :arglists (quote ([_]))}, :protocol rewrite-clj.node.protocols/NodeCoerceable, :name rewrite-clj.node.protocols/coerce, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/protocols.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:unknown}, :order [:unknown]}, :doc nil}