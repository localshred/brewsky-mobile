{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name rewrite-clj.node.whitespace, :imports nil, :requires {node rewrite-clj.node.protocols, rewrite-clj.node.protocols rewrite-clj.node.protocols}, :uses nil, :defs {->NewlineNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 41, :column 12, :end-line 41, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([newlines]))}, :name rewrite-clj.node.whitespace/->NewlineNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 23, :method-params ([newlines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([newlines]))}, WhitespaceNode {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection rewrite-clj.node.whitespace/Object cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable rewrite-clj.node.protocols/Node cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rewrite-clj.node.whitespace/WhitespaceNode, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 26, :type true, :column 12, :internal-ctor true, :line 29, :record true, :end-line 29, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, whitespace? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 120, :column 7, :end-line 120, :end-column 18, :arglists (quote ([node])), :doc "Check whether a node represents whitespace."}, :name rewrite-clj.node.whitespace/whitespace?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 18, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Check whether a node represents whitespace."}, whitespace-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 60, :column 7, :end-line 60, :end-column 22, :arglists (quote ([s])), :doc "Create whitespace node."}, :name rewrite-clj.node.whitespace/whitespace-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create whitespace node."}, space-separated {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 113, :column 9, :end-line 113, :end-column 24, :arglists (quote ([nodes])), :doc "Interleave the given seq of nodes with `\" \"` nodes."}, :name rewrite-clj.node.whitespace/space-separated, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 24, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Interleave the given seq of nodes with `\" \"` nodes."}, linebreak? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 128, :column 7, :end-line 128, :end-column 17, :arglists (quote ([node])), :doc "Check whether a ndoe represents linebreaks."}, :name rewrite-clj.node.whitespace/linebreak?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 17, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Check whether a ndoe represents linebreaks."}, *count-fn* {:name rewrite-clj.node.whitespace/*count-fn*, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 10, :column 1, :end-line 10, :end-column 26, :dynamic true, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 10, :column 16, :end-line 10, :end-column 26, :dynamic true}, :doc "This function is applied to every newline string and should produce\n   the eventual character count."}, comma-separated {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 101, :column 9, :end-line 101, :end-column 24, :arglists (quote ([nodes])), :doc "Interleave the given seq of nodes with `\", \"` nodes."}, :name rewrite-clj.node.whitespace/comma-separated, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 24, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Interleave the given seq of nodes with `\", \"` nodes."}, map->WhitespaceNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 29, :column 12, :end-line 29, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__54808]))}, :name rewrite-clj.node.whitespace/map->WhitespaceNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 26, :method-params ([G__54808]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54808]))}, newlines {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 93, :column 7, :end-line 93, :end-column 15, :arglists (quote ([n])), :doc "Create node representing the given number of newline characters."}, :name rewrite-clj.node.whitespace/newlines, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Create node representing the given number of newline characters."}, whitespace-nodes {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 75, :column 7, :end-line 75, :end-column 23, :arglists (quote ([s])), :doc "Convert a string of whitespace to whitespace/newline nodes."}, :name rewrite-clj.node.whitespace/whitespace-nodes, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Convert a string of whitespace to whitespace/newline nodes."}, NewlineNode {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection rewrite-clj.node.whitespace/Object cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable rewrite-clj.node.protocols/Node cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rewrite-clj.node.whitespace/NewlineNode, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 41, :record true, :end-line 41, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, newline-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([s])), :doc "Create newline node."}, :name rewrite-clj.node.whitespace/newline-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create newline node."}, *newline-fn* {:name rewrite-clj.node.whitespace/*newline-fn*, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 6, :column 1, :end-line 6, :end-column 28, :dynamic true, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 6, :column 16, :end-line 6, :end-column 28, :dynamic true}, :doc "This function is applied to every newline string."}, newline? {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 70, :column 8, :end-line 70, :end-column 16, :private true, :arglists (quote ([c])), :doc "Check whether a character represents a linebreak."}, :private true, :name rewrite-clj.node.whitespace/newline?, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Check whether a character represents a linebreak."}, ->WhitespaceNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 29, :column 12, :end-line 29, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([whitespace]))}, :name rewrite-clj.node.whitespace/->WhitespaceNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 26, :method-params ([whitespace]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([whitespace]))}, spaces {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 88, :column 7, :end-line 88, :end-column 13, :arglists (quote ([n])), :doc "Create node representing the given number of spaces."}, :name rewrite-clj.node.whitespace/spaces, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Create node representing the given number of spaces."}, map->NewlineNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 41, :column 12, :end-line 41, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__54816]))}, :name rewrite-clj.node.whitespace/map->NewlineNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 23, :method-params ([G__54816]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54816]))}, line-separated {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :line 107, :column 9, :end-line 107, :end-column 23, :arglists (quote ([nodes])), :doc "Interleave the given seq of nodes with newline nodes."}, :name rewrite-clj.node.whitespace/line-separated, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/whitespace.cljs", :end-column 23, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Interleave the given seq of nodes with newline nodes."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:newlines :whitespace newlines whitespace :newline}, :order [:whitespace whitespace :newlines :newline newlines]}, :doc nil}