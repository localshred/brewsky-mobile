{:rename-macros {}, :renames {}, :use-macros {whitespace-node rewrite-clj.node.whitespace, space-separated rewrite-clj.node.whitespace, vector-node rewrite-clj.node.seq, meta-node rewrite-clj.node.meta, list-node rewrite-clj.node.seq, map-node rewrite-clj.node.seq, set-node rewrite-clj.node.seq, NodeCoerceable rewrite-clj.node.protocols, token-node rewrite-clj.node.token, coerce rewrite-clj.node.protocols}, :excludes #{}, :name rewrite-clj.node.coercer, :imports nil, :requires {rewrite-clj.node.stringz rewrite-clj.node.stringz, rewrite-clj.node.meta rewrite-clj.node.meta, rewrite-clj.node.token rewrite-clj.node.token, rewrite-clj.node.seq rewrite-clj.node.seq, rewrite-clj.node.fn rewrite-clj.node.fn, rewrite-clj.node.reader-macro rewrite-clj.node.reader-macro, rewrite-clj.node.keyword rewrite-clj.node.keyword, rewrite-clj.node.comment rewrite-clj.node.comment, rewrite-clj.node.quote rewrite-clj.node.quote, rewrite-clj.node.protocols rewrite-clj.node.protocols, rewrite-clj.node.uneval rewrite-clj.node.uneval, rewrite-clj.node.whitespace rewrite-clj.node.whitespace, rewrite-clj.node.forms rewrite-clj.node.forms}, :uses {WhitespaceNode rewrite-clj.node.whitespace, TokenNode rewrite-clj.node.token, whitespace-node rewrite-clj.node.whitespace, space-separated rewrite-clj.node.whitespace, MetaNode rewrite-clj.node.meta, vector-node rewrite-clj.node.seq, DerefNode rewrite-clj.node.reader-macro, StringNode rewrite-clj.node.stringz, KeywordNode rewrite-clj.node.keyword, string-node rewrite-clj.node.stringz, meta-node rewrite-clj.node.meta, NewlineNode rewrite-clj.node.whitespace, UnevalNode rewrite-clj.node.uneval, ReaderMacroNode rewrite-clj.node.reader-macro, list-node rewrite-clj.node.seq, FormsNode rewrite-clj.node.forms, map-node rewrite-clj.node.seq, set-node rewrite-clj.node.seq, CommentNode rewrite-clj.node.comment, SeqNode rewrite-clj.node.seq, QuoteNode rewrite-clj.node.quote, NodeCoerceable rewrite-clj.node.protocols, ReaderNode rewrite-clj.node.reader-macro, FnNode rewrite-clj.node.fn, token-node rewrite-clj.node.token, coerce rewrite-clj.node.protocols}, :defs {node-with-meta {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/coercer.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([n value]))}, :name rewrite-clj.node.coercer/node-with-meta, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/coercer.cljs", :end-column 21, :method-params ([n value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n value]))}, seq-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/coercer.cljs", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([f sq]))}, :name rewrite-clj.node.coercer/seq-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/coercer.cljs", :end-column 15, :method-params ([f sq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f sq]))}, map->children {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/coercer.cljs", :line 84, :column 10, :end-line 84, :end-column 23, :private true, :arglists (quote ([m]))}, :private true, :name rewrite-clj.node.coercer/map->children, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/coercer.cljs", :end-column 23, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}}, :require-macros nil, :doc nil}