{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rewrite-clj.node.stringz, :imports nil, :requires {node rewrite-clj.node.protocols, rewrite-clj.node.protocols rewrite-clj.node.protocols, r cljs.tools.reader, cljs.tools.reader cljs.tools.reader, s clojure.string, clojure.string clojure.string}, :uses nil, :defs {wrap-string {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :line 8, :column 8, :end-line 8, :end-column 19, :private true, :arglists (quote ([v]))}, :private true, :name rewrite-clj.node.stringz/wrap-string, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :end-column 19, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, join-lines {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :line 12, :column 8, :end-line 12, :end-column 18, :private true, :arglists (quote ([lines]))}, :private true, :name rewrite-clj.node.stringz/join-lines, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :end-column 18, :method-params ([lines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines]))}, StringNode {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter rewrite-clj.node.stringz/Object cljs.core/IIterable rewrite-clj.node.protocols/Node cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name rewrite-clj.node.stringz/StringNode, :file ".cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :end-column 22, :type true, :column 12, :internal-ctor true, :line 16, :record true, :end-line 16, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->StringNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :line 16, :column 12, :end-line 16, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([lines]))}, :name rewrite-clj.node.stringz/->StringNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :end-column 22, :method-params ([lines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines]))}, map->StringNode {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :line 16, :column 12, :end-line 16, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__54999]))}, :name rewrite-clj.node.stringz/map->StringNode, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :end-column 22, :method-params ([G__54999]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54999]))}, string-node {:protocol-inline nil, :meta {:file "/code/src/apps/brewsky/.cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :line 42, :column 7, :end-line 42, :end-column 18, :arglists (quote ([lines])), :doc "Create node representing a string value.\n   Takes either a seq of strings or a single one."}, :name rewrite-clj.node.stringz/string-node, :variadic false, :file ".cljs_rhino_repl/rewrite_clj/node/stringz.cljs", :end-column 18, :method-params ([lines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines])), :doc "Create node representing a string value.\n   Takes either a seq of strings or a single one."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:multi-line :lines :token lines}, :order [:lines :multi-line :token lines]}, :doc nil}